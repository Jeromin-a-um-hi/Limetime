(import pygame :as pg)
(import button)
(setv clock (pg.time.Clock))

(defn hello []
  (pg.init)
  (setv screen (pg.display.set_mode (, 854 480)))
  (setv OPEN_GAME (+ pg.USEREVENT 0))
  (setv OPEN_OPTIONS (+ pg.USEREVENT 1))
  (setv OPEN_SCORES (+ pg.USEREVENT 2))
  (setv OPEN_MAIN_MENU (+ pg.USEREVENT 3))
  (main_menu screen (, OPEN_GAME OPEN_OPTIONS OPEN_SCORES OPEN_MAIN_MENU)))

(defn main_menu [screen event_given]
  (screen.fill "#FFFFFF")
  (pg.display.set_caption "Limetime")
  (setv play
        (button.Button "Play" 150 40 (, 695 330) screen (get event_given 0)))
  (setv options
        (button.Button "Options" 150 40 (, 695 380) screen (get event_given 1)))
  (setv scores
        (button.Button "Scores" 150 40 (, 695 430) screen (get event_given 2)))
  (setv running True)
  (while running
    (do
      (clock.tick 60)
      (pg.display.update)
      (play.draw)
      (options.draw)
      (scores.draw)
      (for [event (pg.event.get)]
        (if (= event.type pg.QUIT)
            (do
              (pg.quit)
              (setv running False)))
        (if (= event.type (get event_given 0))
            (do
              (print "game")
              (setv running False)
              (play_game screen event_given)))
        (if (= event.type (get event_given 1))
            (do
              (print "options")
              (setv running False)
              (options_menu screen event_given)))
        (if (= event.type (get event_given 2))
            (do
              (print "scores")
              (setv running False)
              (scores_menu screen event_given))))
      (if (= running False)
          (break)))))

(defn play_game [screen event_given]
  (screen.fill "#FFFFFF")
  (pg.display.set_caption "Limetime - Playing")
  (setv running      True
        moving_right False
        moving_left  False
        player_image (pg.image.load "Resources/Limeman.png")
        back         (button.Button "<" 30 30 (, 0 0) screen (get event_given 3)))
  (screen.blit player_image (, 100 100))
  (while running
    (do
      (clock.tick 60)
      (back.draw)
      (pg.display.update)
      (for [event (pg.event.get)]
        (if (= event.type pg.QUIT)
            (do
              (pg.quit)
              (setv running False)))
        (if (= event.type (get event_given 3))
            (do
              (print "main")
              (setv running False)
              (main_menu screen event_given)))
        (if (= event.type pg.KEYDOWN)
            (if (= event.key pg.K_RIGHT)
                (setv moving_right True))
            (if (= event.key pg.K_LEFT)
                (setv moving_left True)))
        (if (= event.type pg.KEYUP)
            (if (= event.key pg.K_RIGHT)
                (setv moving_right False))
            (if (= event.key pg.K_LEFT)
                (setv moving_left False))))
      (if (= running False)
          (break)))))

(defn options_menu [screen event_given]
  (screen.fill "#FFFFFF")
  (pg.display.set_caption "Limetime - Options")
  (setv running True)
  (setv back 
        (button.Button "<" 30 30 (, 0 0) screen (get event_given 3)))
  (while running
    (do
      (clock.tick 60)
      (pg.display.update)
      (back.draw)
      (for [event (pg.event.get)]
        (if (= event.type pg.QUIT)
            (do
              (pg.quit)
              (setv running False)))
        (if (= event.type (get event_given 3))
            (do
              (print "main")
              (setv running False)
              (main_menu screen event_given))))
      (if (= running False)
          (break)))))

(defn scores_menu [screen event_given]
  (screen.fill "#FFFFFF")
  (pg.display.set_caption "Limetime - Scores")
  (setv running True)
  (setv back 
        (button.Button "<" 30 30 (, 0 0) screen (get event_given 3)))
  (while running
    (do
      (clock.tick 60)
      (pg.display.update)
      (back.draw)
      (for [event (pg.event.get)]
        (if (= event.type pg.QUIT)
            (do
              (pg.quit)
              (setv running False)))
        (if (= event.type (get event_given 3))
            (do
              (print "main")
              (setv running False)
              (main_menu screen event_given))))
      (if (= running False)
          (break)))))

(hello)
